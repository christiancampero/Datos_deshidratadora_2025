name: Enviar datos de clima a ThingSpeak

on:
  schedule:
    - cron: "*/10 * * * *"   # Cada 10 minutos
  workflow_dispatch:         # Permite ejecución manual

jobs:
  update-weather:
    runs-on: ubuntu-latest

    steps:
      - name: Preparar entorno
        run: |
          echo "Comenzando job: enviar clima a ThingSpeak"
          which curl || apt-get update && apt-get install -y curl
          which jq || apt-get update && apt-get install -y jq

      - name: Obtener condiciones actuales desde AccuWeather
        id: clima
        env:
          ACCU_KEY: ${{ secrets.ACCUWEATHER_API_KEY }}
        run: |
          set -e
          LOCATION_KEY="350550"   # Fray Bentos, Uruguay (ajustar si se desea otro)
          echo "Consultando AccuWeather para locationKey=${LOCATION_KEY}"
          RAW=$(curl -s "http://dataservice.accuweather.com/currentconditions/v1/${LOCATION_KEY}?apikey=${ACCU_KEY}&details=true")
          echo "RAW: $RAW"
          # Extraer temperature (Metric.Value) y relative humidity de la primera entrada
          TEMP_EXT=$(echo "$RAW" | jq -r '.[0].Temperature.Metric.Value // empty')
          HUM_EXT=$(echo "$RAW" | jq -r '.[0].RelativeHumidity // empty')
          # Validar
          if [ -z "$TEMP_EXT" ] || [ -z "$HUM_EXT" ]; then
            echo "ERROR: No se pudo extraer temp o humedad desde la respuesta de AccuWeather"
            echo "raw_response<<EOF" >> $GITHUB_OUTPUT
            echo "$RAW" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "temp_ext=$TEMP_EXT" >> $GITHUB_OUTPUT
          echo "hum_ext=$HUM_EXT" >> $GITHUB_OUTPUT
          echo "::debug::Temperatura externa = $TEMP_EXT ; Humedad externa = $HUM_EXT"

      - name: Calcular campos y enviar a ThingSpeak
        env:
          THINGS_KEY: ${{ secrets.THINGSPEAK_API_KEY }}
        run: |
          set -e
          TEMP_EXT="${{ steps.clima.outputs.temp_ext }}"
          HUM_EXT="${{ steps.clima.outputs.hum_ext }}"

          # Calculos sencillos (puedes cambiar las fórmulas)
          # Temperatura interna = externa + 3
          # Humedad interna = externa + 2 (ejemplo)
          # Presión = 1010..1019 (aleatorio)
          # Altitud = valor fijo de ejemplo
          # Peso = ejemplo aleatorio
          TEMP_INT=$(printf "%.2f" "$(echo "$TEMP_EXT + 3" | bc -l)")
          HUM_INT=$(printf "%.0f" "$(echo "$HUM_EXT + 2" | bc -l)")
          PRESION=$((1010 + (RANDOM % 10)))
          ALTITUD=30
          PESO=$((50 + (RANDOM % 6)))

          echo "Valores a enviar:"
          echo " TEMP_INT=${TEMP_INT}"
          echo " HUM_INT=${HUM_INT}"
          echo " PRESION=${PRESION}"
          echo " ALTITUD=${ALTITUD}"
          echo " PESO=${PESO}"
          echo " TEMP_EXT=${TEMP_EXT}"
          echo " HUM_EXT=${HUM_EXT}"

          # Enviar a ThingSpeak (POST form)
          TS_URL="https://api.thingspeak.com/update.json"
          resp=$(curl -s -w "%{http_code}" -o /tmp/ts_resp.txt -X POST "${TS_URL}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data "api_key=${THINGS_KEY}&field1=${TEMP_INT}&field2=${HUM_INT}&field3=${PRESION}&field4=${ALTITUD}&field5=${PESO}&field6=${TEMP_EXT}&field7=${HUM_EXT}")

          http_code="$resp"
          body="$(cat /tmp/ts_resp.txt || true)"

          echo "ThingSpeak HTTP status: ${http_code}"
          echo "ThingSpeak body: ${body}"

          if [ "$http_code" -ne 200 ] && [ "$http_code" -ne 201 ]; then
            echo "ERROR: ThingSpeak respondió con código HTTP ${http_code}"
            exit 1
          fi

          # ThingSpeak devuelve un número (entry_id) > 0 si fue exitoso
          if ! echo "$body" | grep -E '^[0-9]+$' >/dev/null 2>&1; then
            echo "WARNING: Respuesta inesperada de ThingSpeak: $body"
          else
            if [ "$body" -eq 0 ]; then
              echo "WARNING: ThingSpeak devolvió 0 => error al crear entrada (posible formato inválido o rate limit)."
            else
              echo "Éxito: entry_id = $body"
            fi
          fi
