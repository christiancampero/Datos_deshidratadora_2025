name: Enviar datos de clima a ThingSpeak

on:
  schedule:
    - cron: "*/10 * * * *"   # Cada 10 minutos
  workflow_dispatch:

jobs:
  update-weather:
    runs-on: ubuntu-latest

    steps:
      - name: Instalar dependencias
        run: |
          apt-get update && apt-get install -y curl jq bc

      - name: Obtener LocationKey dinámico para Fray Bentos
        id: location
        env:
          ACCU_KEY: ${{ secrets.ACCUWEATHER_API_KEY }}
        run: |
          CITY="Fray Bentos"
          COUNTRY_CODE="UY"
          echo "Buscando LocationKey para ${CITY}, ${COUNTRY_CODE}"
          SEARCH_URL="http://dataservice.accuweather.com/locations/v1/cities/search?apikey=${ACCU_KEY}&q=${CITY},${COUNTRY_CODE}"
          RESPONSE=$(curl -s "$SEARCH_URL")
          LOCATION_KEY=$(echo "$RESPONSE" | jq -r '.[0].Key')
          if [ -z "$LOCATION_KEY" ] || [ "$LOCATION_KEY" = "null" ]; then
            echo "ERROR: No se encontró LocationKey para ${CITY}"
            echo "$RESPONSE"
            exit 1
          fi
          echo "LocationKey encontrado: ${LOCATION_KEY}"
          echo "location_key=${LOCATION_KEY}" >> $GITHUB_OUTPUT

      - name: Obtener datos de clima desde AccuWeather
        id: clima
        env:
          ACCU_KEY: ${{ secrets.ACCUWEATHER_API_KEY }}
        run: |
          LOCATION_KEY="${{ steps.location.outputs.location_key }}"
          WEATHER_URL="http://dataservice.accuweather.com/currentconditions/v1/${LOCATION_KEY}?apikey=${ACCU_KEY}&details=true"
          RAW=$(curl -s "$WEATHER_URL")
          TEMP_EXT=$(echo "$RAW" | jq -r '.[0].Temperature.Metric.Value // empty')
          HUM_EXT=$(echo "$RAW" | jq -r '.[0].RelativeHumidity // empty')
          if [ -z "$TEMP_EXT" ] || [ -z "$HUM_EXT" ]; then
            echo "Error al obtener datos del clima."
            echo "$RAW"
            exit 1
          fi
          echo "temp_ext=${TEMP_EXT}" >> $GITHUB_OUTPUT
          echo "hum_ext=${HUM_EXT}" >> $GITHUB_OUTPUT
          echo "Datos de clima: TempExt=${TEMP_EXT}, HumExt=${HUM_EXT}"

      - name: Calcular y enviar datos a ThingSpeak
        id: envio
        env:
          THINGS_KEY: ${{ secrets.THINGSPEAK_API_KEY }}
        run: |
          TEMP_EXT="${{ steps.clima.outputs.temp_ext }}"
          HUM_EXT="${{ steps.clima.outputs.hum_ext }}"
          TEMP_INT=$(echo "$TEMP_EXT + 3" | bc)
          HUM_INT=$(echo "$HUM_EXT + 2" | bc)
          PRESION=$((1010 + (RANDOM % 10)))
          ALTITUD=30
          PESO=$((50 + (RANDOM % 6)))

          echo "Preparando datos para enviar..."
          echo "Temperatura interna: $TEMP_INT"
          echo "Temperatura externa: $TEMP_EXT"

          RESPONSE=$(curl -s -X POST "https://api.thingspeak.com/update.json" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data "api_key=${THINGS_KEY}&field1=${TEMP_INT}&field2=${HUM_INT}&field3=${PRESION}&field4=${ALTITUD}&field5=${PESO}&field6=${TEMP_EXT}&field7=${HUM_EXT}")

          echo "Respuesta de ThingSpeak: $RESPONSE"
          ENTRY_ID=$(echo "$RESPONSE" | jq -r '.entry_id // 0')
          echo "entry_id=${ENTRY_ID}" >> $GITHUB_OUTPUT

      - name: Guardar entry_id para la página
        run: |
          mkdir -p public
          echo "${{ steps.envio.outputs.entry_id }}" > public/last_entry.txt

      - name: Subir entry_id al repositorio
        uses: actions/upload-artifact@v4
        with:
          name: last_entry
          path: public/last_entry.txt
